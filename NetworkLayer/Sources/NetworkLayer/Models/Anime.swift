//
// Anime.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Anime Resource */
public struct Anime: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case tv = "TV"
        case ova = "OVA"
        case movie = "Movie"
        case special = "Special"
        case ona = "ONA"
        case music = "Music"
    }
    public enum Status: String, Codable, CaseIterable {
        case finishedAiring = "Finished Airing"
        case currentlyAiring = "Currently Airing"
        case notYetAired = "Not yet aired"
    }
    public enum Rating: String, Codable, CaseIterable {
        case gAllAges = "G - All Ages"
        case pgChildren = "PG - Children"
        case pg13Teens13OrOlder = "PG-13 - Teens 13 or older"
        case r17PlusViolenceAmpersandProfanity = "R - 17+ (violence & profanity)"
        case rPlusMildNudity = "R+ - Mild Nudity"
        case rxHentai = "Rx - Hentai"
    }
    public enum Season: String, Codable, CaseIterable {
        case summer = "summer"
        case winter = "winter"
        case spring = "spring"
        case fall = "fall"
    }
    /** MyAnimeList ID */
    public var malId: Int?
    /** MyAnimeList URL */
    public var url: String?
    public var images: AnimeImages?
    public var trailer: TrailerBase?
    /** Title */
    public var title: String?
    /** English Title */
    public var titleEnglish: String?
    /** Japanese Title */
    public var titleJapanese: String?
    /** Other Titles */
    public var titleSynonyms: [String]?
    /** Anime Type */
    public var type: ModelType?
    /** Original Material/Source adapted from */
    public var source: String?
    /** Episode count */
    public var episodes: Int?
    /** Airing status */
    public var status: Status?
    /** Airing boolean */
    public var airing: Bool?
    public var aired: Daterange?
    /** Parsed raw duration */
    public var duration: String?
    /** Anime audience rating */
    public var rating: Rating?
    /** Score */
    public var score: Float?
    /** Number of users */
    public var scoredBy: Int?
    /** Ranking */
    public var rank: Int?
    /** Popularity */
    public var popularity: Int?
    /** Number of users who have added this entry to their list */
    public var members: Int?
    /** Number of users who have favorited this entry */
    public var favorites: Int?
    /** Synopsis */
    public var synopsis: String?
    /** Background */
    public var background: String?
    /** Season */
    public var season: Season?
    /** Year */
    public var year: Int?
    public var broadcast: Broadcast?
    public var producers: [MalUrl]?
    public var licensors: [MalUrl]?
    public var studios: [MalUrl]?
    public var genres: [MalUrl]?
    public var explicitGenres: [MalUrl]?
    public var themes: [MalUrl]?
    public var demographics: [MalUrl]?

    public init(malId: Int? = nil, url: String? = nil, images: AnimeImages? = nil, trailer: TrailerBase? = nil, title: String? = nil, titleEnglish: String? = nil, titleJapanese: String? = nil, titleSynonyms: [String]? = nil, type: ModelType? = nil, source: String? = nil, episodes: Int? = nil, status: Status? = nil, airing: Bool? = nil, aired: Daterange? = nil, duration: String? = nil, rating: Rating? = nil, score: Float? = nil, scoredBy: Int? = nil, rank: Int? = nil, popularity: Int? = nil, members: Int? = nil, favorites: Int? = nil, synopsis: String? = nil, background: String? = nil, season: Season? = nil, year: Int? = nil, broadcast: Broadcast? = nil, producers: [MalUrl]? = nil, licensors: [MalUrl]? = nil, studios: [MalUrl]? = nil, genres: [MalUrl]? = nil, explicitGenres: [MalUrl]? = nil, themes: [MalUrl]? = nil, demographics: [MalUrl]? = nil) {
        self.malId = malId
        self.url = url
        self.images = images
        self.trailer = trailer
        self.title = title
        self.titleEnglish = titleEnglish
        self.titleJapanese = titleJapanese
        self.titleSynonyms = titleSynonyms
        self.type = type
        self.source = source
        self.episodes = episodes
        self.status = status
        self.airing = airing
        self.aired = aired
        self.duration = duration
        self.rating = rating
        self.score = score
        self.scoredBy = scoredBy
        self.rank = rank
        self.popularity = popularity
        self.members = members
        self.favorites = favorites
        self.synopsis = synopsis
        self.background = background
        self.season = season
        self.year = year
        self.broadcast = broadcast
        self.producers = producers
        self.licensors = licensors
        self.studios = studios
        self.genres = genres
        self.explicitGenres = explicitGenres
        self.themes = themes
        self.demographics = demographics
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case malId = "mal_id"
        case url
        case images
        case trailer
        case title
        case titleEnglish = "title_english"
        case titleJapanese = "title_japanese"
        case titleSynonyms = "title_synonyms"
        case type
        case source
        case episodes
        case status
        case airing
        case aired
        case duration
        case rating
        case score
        case scoredBy = "scored_by"
        case rank
        case popularity
        case members
        case favorites
        case synopsis
        case background
        case season
        case year
        case broadcast
        case producers
        case licensors
        case studios
        case genres
        case explicitGenres = "explicit_genres"
        case themes
        case demographics
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(malId, forKey: .malId)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(trailer, forKey: .trailer)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(titleEnglish, forKey: .titleEnglish)
        try container.encodeIfPresent(titleJapanese, forKey: .titleJapanese)
        try container.encodeIfPresent(titleSynonyms, forKey: .titleSynonyms)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(episodes, forKey: .episodes)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(airing, forKey: .airing)
        try container.encodeIfPresent(aired, forKey: .aired)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(rating, forKey: .rating)
        try container.encodeIfPresent(score, forKey: .score)
        try container.encodeIfPresent(scoredBy, forKey: .scoredBy)
        try container.encodeIfPresent(rank, forKey: .rank)
        try container.encodeIfPresent(popularity, forKey: .popularity)
        try container.encodeIfPresent(members, forKey: .members)
        try container.encodeIfPresent(favorites, forKey: .favorites)
        try container.encodeIfPresent(synopsis, forKey: .synopsis)
        try container.encodeIfPresent(background, forKey: .background)
        try container.encodeIfPresent(season, forKey: .season)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(broadcast, forKey: .broadcast)
        try container.encodeIfPresent(producers, forKey: .producers)
        try container.encodeIfPresent(licensors, forKey: .licensors)
        try container.encodeIfPresent(studios, forKey: .studios)
        try container.encodeIfPresent(genres, forKey: .genres)
        try container.encodeIfPresent(explicitGenres, forKey: .explicitGenres)
        try container.encodeIfPresent(themes, forKey: .themes)
        try container.encodeIfPresent(demographics, forKey: .demographics)
    }
}

